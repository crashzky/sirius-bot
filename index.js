const {
    MongoClient
} = require('mongodb');
const {
    Telegraf,
    Markup
} = require('telegraf')
const fetch = require('node-fetch');

const uri = process.env.MONGO_CONNECTION_STRING;
const client = new MongoClient(uri, {
    useNewUrlParser: true,
    useUnifiedTopology: true
});

const BOT_TOKEN = process.env.BOT_TOKEN;
const bot = new Telegraf(BOT_TOKEN);

console.log(process.env.NAME);

client.connect(err => {
    const collectionUsers = client.db('sirius').collection('users');

    //–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    function insertUser(ctx) {
        const insertUser = {
            chat_id: ctx.chat.id
        };

        collectionUsers.insertOne(insertUser, function (err, results) {
            ctx.reply('–†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!\n–ù–∞—á–Ω—ë–º. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?');
        });
    }

    //–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–∏–º–≤–æ–ª—ã
    function checkSymbols(string, type) {
        const russian = '–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è';
        const numbers = '0123456789';

        let returnResult = true;
        switch (type) {
            case 'russian':
                string.toLowerCase().split('').forEach(i => {
                    if (!russian.includes(i))
                        returnResult = false;
                });
                break;
            case 'numbers':
                if (string <= 0 || string > 100)
                    return false;
                string.toLowerCase().split('').forEach(i => {
                    if (!numbers.includes(i))
                        returnResult = false;
                });
                break;
        }
        return returnResult;
    }

    //–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ—é –∞–Ω–∫–µ—Ç—É —Å –º–µ–Ω—é
    function sendMenu(ctx, user) {
        const caption = `${user.name}\n${user.age} –ª–µ—Ç\n${user.description ? user.description + '\n' : ''}–¢–≤–æ–π –ø–æ–ª: ${user.gender.toLowerCase()}\n–ò–Ω—Ç–µ—Ä–µ—Å–µ–Ω: ${user.searchGender.toLowerCase()}`;

        fetch(`https://api.telegram.org/bot${BOT_TOKEN}/getFile?file_id=${user.image_id}`)
            .then(data => data.json())
            .then(json => ctx.replyWithPhoto({
                url: `https://api.telegram.org/file/bot${BOT_TOKEN}/${json.result.file_path}`
            }, {
                caption
            }))
            .then(() => ctx.reply('–ß—Ç–æ –±—É–µ–º –¥–µ–ª–∞—Ç—å?', Markup
                .keyboard([
                    ['–°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã'],
                    ['–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –º–æ—é –∞–Ω–∫–µ—Ç—É']
                ])
                .oneTime()
                .resize()));
    }

    //–ø–∏—à–µ–º, —á—Ç–æ —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –ø–æ–Ω—Ä–∞–∏–≤–ª–∞—Å—å
    function sendLike(ctx, user, chat_id) {
        const caption = `${user.name}\n${user.age} –ª–µ—Ç${user.description ? '\n' + user.description : ''}`;

        fetch(`https://api.telegram.org/bot${BOT_TOKEN}/getFile?file_id=${user.image_id}`)
            .then(data => data.json())
            .then(json => ctx.telegram.sendPhoto(chat_id, {
                url: `https://api.telegram.org/file/bot${BOT_TOKEN}/${json.result.file_path}`
            }, {
                caption
            }))
            .then(() => ctx.telegram.sendMessage(chat_id, '–¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ –∫–æ–º—É-—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å. –ß—Ç–æ —Å–∫–∞–∂–µ—à—å?', Markup
                .keyboard([
                    ['‚ù§Ô∏èÔ∏è', 'üëé']
                ])
                .oneTime()
                .resize()));
    }

    //–ø–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∫–µ—Ç—É
    function sendForm(ctx, results) {
        collectionUsers.find().toArray((err, searchResults) => {
            if (searchResults.length === 0) {
                collectionUsers.updateOne({
                        chat_id: ctx.chat.id
                    }, {
                        $set: {
                            watchedList: []
                        }
                    },
                    () => {
                        ctx.reply('–ü–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ :(\n–ü—Ä–∏—Ö–æ–¥–∏ –ø–æ–∑–∂–µ, —è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∫–æ–≥–æ-–Ω–∏–±—É–¥—å –Ω–∞–π–¥—É!');
                    }
                );
            } else {
                const filterResults = searchResults.filter(i => i.liked && i.chat_id !== ctx.chat.id)
                    .filter(i => i.searchGender === results[0].gender.toLowerCase() || i.searchGender.toLowerCase() === '–ª—é–±–æ–π')
                    .filter(i => i.gender === results[0].searchGender.toLowerCase() || results[0].searchGender.toLowerCase() === '–ª—é–±–æ–π')
                    .filter(i => !results[0].likedList.includes(i.chat_id));

                if (filterResults.length !== 0) {
                    let searchIsComplete = false;

                    let filterResultsWatched = filterResults.filter(i => !results[0].watchedList.includes(i.chat_id));
                    if (filterResultsWatched.length === 0) {
                        filterResultsWatched = filterResults;
                        collectionUsers.updateOne({
                                chat_id: ctx.chat.id
                            }, {
                                $set: {
                                    watchedList: []
                                }
                            },
                            () => {
                                ctx.reply('–ê–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! –Ø –µ—â—ë —Ä–∞–∑ –ø–æ–∫–∞–∂—É –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–º —Ç—ã –ø–æ—Å—Ç–∞–≤–∏–ª üëé')
                            }
                        );
                    }

                    filterResultsWatched.forEach(i => {
                        if (!searchIsComplete) {
                            const caption = `${i.name}\n${i.age} –ª–µ—Ç${i.description ? '\n' + i.description : ''}`;
                            searchIsComplete = true;
                            collectionUsers.updateOne({
                                    chat_id: ctx.chat.id
                                }, {
                                    $set: {
                                        formNow: i.chat_id
                                    }
                                },
                                () => {

                                }
                            );

                            fetch(`https://api.telegram.org/bot${BOT_TOKEN}/getFile?file_id=${i.image_id}`)
                                .then(data => data.json())
                                .then(json => ctx.replyWithPhoto({
                                    url: `https://api.telegram.org/file/bot${BOT_TOKEN}/${json.result.file_path}`
                                }, {
                                    caption
                                }))
                                .then(() => ctx.reply('–ù–∞—à—ë–ª –∫–æ–µ-—á—Ç–æ. –ö–∞–∫ —Ç–µ–±–µ?', Markup
                                    .keyboard([
                                        ['‚ù§Ô∏èÔ∏è', 'üëé', 'üí§']
                                    ])
                                    .oneTime()
                                    .resize()));
                        }
                    });
                } else
                    ctx.reply('–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏–∫–æ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ :(\n–ü—Ä–∏—Ö–æ–¥–∏ –ø–æ–∑–∂–µ, —è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —á—Ç–æ-–Ω–∏–±—É–¥—å –Ω–∞–π–¥—É!');
            }
        });
    }

    //–Ω–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    bot.command('start', (ctx) => {
        collectionUsers.find({
            chat_id: ctx.chat.id
        }).toArray((err, results) => {

            if (results.length !== 0) {
                ctx.reply('–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?\n–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n1. –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã\n2. –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –º–æ—é –∞–Ω–∫–µ—Ç—É', Markup
                .keyboard([
                    ['–°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã'],
                    ['–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –º–æ—é –∞–Ω–∫–µ—Ç—É']
                ])
                .oneTime()
                .resize());
            } else {
                insertUser(ctx);
            }
        });
    });

    bot.on('text', (ctx) => {
        collectionUsers.find({
            chat_id: ctx.chat.id
        }).toArray((err, results) => {
            if (results.length === 0) {
                insertUser(ctx);
            } else if (!results[0].name) {

                if (ctx.message.text && ctx.message.text.length > 0 && checkSymbols(ctx.message.text, 'russian')) {
                    collectionUsers.updateOne({
                            chat_id: ctx.chat.id
                        }, {
                            $set: {
                                name: ctx.message.text
                            }
                        },
                        () => {
                            ctx.reply('–•–æ—Ä–æ—à–æ. –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?');
                        }
                    );
                } else {
                    ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã —Ä—É—Å—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞');
                }

            } else if (!results[0].age) {

                if (ctx.message.text && ctx.message.text.length > 0 && checkSymbols(ctx.message.text, 'numbers')) {
                    collectionUsers.updateOne({
                            chat_id: ctx.chat.id
                        }, {
                            $set: {
                                age: Number.parseInt(ctx.message.text)
                            }
                        },
                        () => {
                            ctx.reply('–ò–¥—ë–º –¥–∞–ª—å—à–µ. –ü—Ä–∏–∫—Ä–µ–ø–∏ —Å–≤–æ—ë —Ñ–æ—Ç–æ');
                        }
                    );
                } else {
                    ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.');
                }

            } else if (!results[0].image_id) {
                ctx.reply('–û—Ç–ø—Ä–∞–≤—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é');
            } else if (results[0].image_id && !results[0].description && results[0].description !== null) {

                let description = null;
                if (ctx.message.text !== '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å') {
                    description = ctx.message.text;
                }
                collectionUsers.updateOne({
                        chat_id: ctx.chat.id
                    }, {
                        $set: {
                            description
                        }
                    },
                    () => {
                        ctx.reply('–ù—É –∏ –Ω–∞ –ø–æ—Å–ª–µ–¥–æ–∫. –¢–≤–æ–π –ø–æ–ª?', Markup
                            .keyboard([
                                ['–ú—É–∂—Å–∫–æ–π', '–ñ–µ–Ω—Å–∫–∏–π']
                            ])
                            .oneTime()
                            .resize());
                    }
                );

            } else if (!results[0].gender) {

                if (ctx.message.text === '–ú—É–∂—Å–∫–æ–π' || ctx.message.text === '–ñ–µ–Ω—Å–∫–∏–π') {
                    collectionUsers.updateOne({
                            chat_id: ctx.chat.id
                        }, {
                            $set: {
                                gender: ctx.message.text.toLowerCase()
                            }
                        },
                        () => {
                            ctx.reply('–ö—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω?', Markup
                                .keyboard([
                                    ['–ú—É–∂—Å–∫–æ–π', '–ñ–µ–Ω—Å–∫–∏–π', '–õ—é–±–æ–π']
                                ])
                                .oneTime()
                                .resize());
                        }
                    );
                } else {
                    ctx.reply('–ù–∞–ø–∏—à–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ–ª: –ú—É–∂—Å–∫–æ–π/–ñ–µ–Ω—Å–∫–∏–π');
                }

            } else if (!results[0].searchGender) {

                if (ctx.message.text === '–ú—É–∂—Å–∫–æ–π' || ctx.message.text === '–ñ–µ–Ω—Å–∫–∏–π' || ctx.message.text === '–õ—é–±–æ–π') {
                    collectionUsers.updateOne({
                            chat_id: ctx.chat.id
                        }, {
                            $set: {
                                searchGender: ctx.message.text.toLowerCase()
                            }
                        },
                        () => {
                            collectionUsers.find({
                                chat_id: ctx.chat.id
                            }).toArray(function (err, results) {
                                const user = results[0];
                                const caption = `${user.name}\n${user.age} –ª–µ—Ç\n${user.description ? user.description + '\n' : ''}–¢–≤–æ–π –ø–æ–ª: ${user.gender.toLowerCase()}\n–ò–Ω—Ç–µ—Ä–µ—Å–µ–Ω: ${user.searchGender.toLowerCase()}`;

                                fetch(`https://api.telegram.org/bot${BOT_TOKEN}/getFile?file_id=${user.image_id}`)
                                    .then(data => data.json())
                                    .then(json => ctx.replyWithPhoto({
                                        url: `https://api.telegram.org/file/bot${BOT_TOKEN}/${json.result.file_path}`
                                    }, {
                                        caption
                                    }))
                                    .then(() => ctx.reply('–í—Å—ë –≤–µ—Ä–Ω–æ?', Markup
                                        .keyboard([
                                            ['–î–∞', '–ù–µ—Ç, –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å']
                                        ])
                                        .oneTime()
                                        .resize()));
                            });
                        }
                    );
                } else {
                    ctx.reply('–ù–∞–ø–∏—à–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ–ª: –ú—É–∂—Å–∫–æ–π/–ñ–µ–Ω—Å–∫–∏–π/–õ—é–±–æ–π');
                }

            } else if (!results[0].watchedList) {
                if (ctx.message.text === '–î–∞') {
                    collectionUsers.updateOne({
                            chat_id: ctx.chat.id
                        }, {
                            $set: {
                                watchedList: [],
                                liked: [],
                                likedList: []
                            }
                        },
                        () => {
                            sendMenu(ctx, results[0]);
                        }
                    );
                } else {
                    collectionUsers.deleteOne({
                        chat_id: ctx.chat.id
                    }, () => {
                        const insertUser = {
                            chat_id: ctx.chat.id
                        };

                        collectionUsers.insertOne(insertUser, function (err, results) {
                            ctx.reply('–û–∫–µ–π. –ù–∞—á–Ω—ë–º —Å –Ω–∞—á–∞–ª–∞.\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?');
                        });
                    });
                }
            } else {
                if (ctx.message.text.toLowerCase() === '–ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –º–æ—é –∞–Ω–∫–µ—Ç—É') {
                    collectionUsers.deleteOne({
                        chat_id: ctx.chat.id
                    }, () => {
                        const insertUser = {
                            chat_id: ctx.chat.id
                        };

                        collectionUsers.insertOne(insertUser, function (err, results) {
                            ctx.reply('–ù–∞—á–Ω—ë–º. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?');
                        });
                    });
                } else if (ctx.message.text.toLowerCase() === '—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã') {
                    sendForm(ctx, results);
                } else if (ctx.message.text === '‚ù§Ô∏èÔ∏è') {
                    collectionUsers.find({
                        chat_id: ctx.chat.id
                    }).toArray((err, results) => {
                        //–ø—Ä–æ–≤–µ—Ä—è–µ–º, –ª–∞–π–∫–Ω—É–ª –ª–∏ –Ω–∞—Å –∫—Ç–æ-—Ç–æ
                        if (results[0].liked.length !== 0) {
                            const liker = results[0].liked[0];
                            let newLiked = results[0].liked;
                            newLiked.splice(0, 1);

                            collectionUsers.updateOne({
                                    chat_id: results[0].chat_id
                                }, {
                                    $set: {
                                        liked: newLiked
                                    }
                                },
                                () => {
                                    collectionUsers.find({
                                        chat_id: results[0].chat_id
                                    }).toArray((err, updateResults) => {
                                        ctx.telegram.getChat(liker)
                                            .then(data => ctx.reply(`–û—Ç–ª–∏—á–Ω–æ! –•–æ—Ä–æ—à–µ–π –±–µ—Å–µ–¥—ã :)\n–ê–∫–∫–∞—É–Ω—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: @${data.username}`));

                                        ctx.telegram.sendMessage(liker, `–•—ç–π! –¢–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–µ –ø—Ä–æ—á—å –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! :)\n–ê–∫–∫–∞—É–Ω—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: @${ctx.chat.username}`);
                                        if (newLiked.length !== 0) {
                                            collectionUsers.find({
                                                chat_id: newLiked[0]
                                            }).toArray((err, users) => {
                                                sendLike(ctx, users[0], ctx.chat.id);
                                            });
                                        } else {
                                            sendMenu(ctx, updateResults[0]);
                                        }
                                    });
                                }
                            );
                        } else if (!results[0].formNow)
                            ctx.reply('–ü–æ—Ö–æ–∂–µ –≤—ã –Ω–µ –Ω–∞—á–∏–Ω–∞–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç...');
                        else {
                            collectionUsers.find({
                                chat_id: results[0].formNow
                            }).toArray((err, likedResult) => {
                                let newLiked = likedResult[0].liked;
                                newLiked.push(ctx.chat.id);

                                collectionUsers.updateOne({
                                        chat_id: results[0].formNow
                                    }, {
                                        $set: {
                                            liked: newLiked
                                        }
                                    },
                                    (err, updateLiked) => {
                                        let newWathcedList = results[0].watchedList;
                                        newWathcedList.push(results[0].formNow);

                                        let newLikedList = results[0].likedList;
                                        newLikedList.push(results[0].formNow);

                                        collectionUsers.updateOne({
                                                chat_id: results[0].chat_id
                                            }, {
                                                $set: {
                                                    watchedList: newWathcedList,
                                                    likedList: newLikedList
                                                }
                                            },
                                            () => {
                                                collectionUsers.find({
                                                    chat_id: results[0].chat_id
                                                }).toArray((err, updateResults) => {
                                                    if(newLiked.length === 1)
                                                        sendLike(ctx, updateResults[0], results[0].formNow);
                                                    sendForm(ctx, updateResults);
                                                });
                                            }
                                        );
                                    }
                                );
                            });
                        }
                    });
                } else if (ctx.message.text === 'üëé') {
                    collectionUsers.find({
                        chat_id: ctx.chat.id
                    }).toArray((err, results) => {
                        if (results[0].liked.length !== 0) {
                            let newLiked = results[0].liked;
                            newLiked.splice(0, 1);

                            collectionUsers.updateOne({
                                    chat_id: results[0].chat_id
                                }, {
                                    $set: {
                                        liked: newLiked
                                    }
                                },
                                () => {
                                    collectionUsers.find({
                                        chat_id: results[0].chat_id
                                    }).toArray((err, updateResults) => {
                                        if (newLiked.length !== 0) {
                                            collectionUsers.find({
                                                chat_id: newLiked[0]
                                            }).toArray((err, users) => {
                                                sendLike(ctx, users[0], ctx.chat.id);
                                            });
                                        } else {
                                            sendMenu(ctx, updateResults[0]);
                                        }
                                    });
                                }
                            );
                        } else if (!results[0].formNow)
                            ctx.reply('–ü–æ—Ö–æ–∂–µ –≤—ã –Ω–µ –Ω–∞—á–∏–Ω–∞–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç...');
                        else {
                            let newWathcedList = results[0].watchedList;
                            newWathcedList.push(results[0].formNow);

                            collectionUsers.updateOne({
                                    chat_id: ctx.chat.id
                                }, {
                                    $set: {
                                        watchedList: newWathcedList
                                    }
                                },
                                () => {
                                    sendForm(ctx, results);
                                }
                            );
                        }
                    });
                } else if (ctx.message.text === 'üí§') {
                    collectionUsers.find({
                        chat_id: ctx.chat.id
                    }).toArray((err, results) => {
                        if (!results[0].formNow)
                            ctx.reply('–ü–æ—Ö–æ–∂–µ –≤—ã –Ω–µ –Ω–∞—á–∏–Ω–∞–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç...');
                        else {
                            collectionUsers.updateOne({
                                    chat_id: ctx.chat.id
                                }, {
                                    $set: {
                                        formNow: null
                                    }
                                },
                                () => {}
                            );
                            sendMenu(ctx, results[0]);
                        }
                    });
                } else {
                    ctx.reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
                }
            }
        });
    });

    bot.on('photo', (ctx) => {
        collectionUsers.find({
            chat_id: ctx.chat.id
        }).toArray((err, results) => {
            if (results.length === 0) {
                insertUser(ctx);
            } else if (results[0].age && !results[0].image_id) {
                let photo = null;

                for(let j = 0; j < 4; j++)
                   photo = ctx.message.photo[j] ? ctx.message.photo[j].file_id : photo;

                if(photo) {
                collectionUsers.updateOne({
                        chat_id: ctx.chat.id
                    }, {
                        $set: {
                            image_id: photo
                        }
                    },
                    () => {
                        ctx.reply('–ö—Ä—É—Ç–∞—è —Ñ–æ—Ç–∫–∞! –†–∞—Å—Å–∫–∞–∂–µ—à—å –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ? (–≠—Ç–æ—Ç —à–∞–≥ –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)', Markup
                            .keyboard([
                                ['–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å']
                            ])
                            .oneTime()
                            .resize());
                    }
                );
              } else
                 ctx.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ-—Ç–æ –ø–æ–ª—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!");
            } else {
                ctx.reply('–§–æ—Ç–æ –∫–ª–∞—Å—Å–Ω–æ–µ, –Ω–æ –æ–Ω–æ –º–Ω–µ —Å–µ–π—á–∞—Å –Ω–µ –Ω—É–∂–Ω–æ');
            }
        });
    });

    //–∑–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–±–∏–ª–æ–≤
    bot.on('video', (ctx) => {
        ctx.reply('–ö—Ä—É—Ç–æ–µ –≤–∏–¥–µ–æ üóø');
    });

    bot.on('sticker', (ctx) => {
        ctx.reply('–ö—Ä—É—Ç–æ–π —Å—Ç–∏–∫–µ—Ä üóø');
    });

    bot.on('audio', (ctx) => {
        ctx.reply('–ö—Ä—É—Ç–æ üóø');
    });

    bot.on('location', (ctx) => {
        ctx.reply('–ö—Ä—É—Ç–æ üóø');
    });

    bot.on('document', (ctx) => {
        ctx.reply('–ö—Ä—É—Ç–æ üóø\n –ï—Å–ª–∏ —á—Ç–æ, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π, –∞ –Ω–µ —Ñ–∞–π–ª–æ–º');
    });

    bot.on('poll', (ctx) => {
        ctx.reply('–ó–∞ 1 üóø');
    });

    bot.on('contact', (ctx) => {
        ctx.reply('–ó–∞–≤—Ç—Ä–∞ –ø–æ–∑–≤–æ–Ω—é üóø');
    });

    bot.launch({
        webhook: {
          domain: 'https://sirius-tinder.herokuapp.com/',
          port: process.env.PORT
        }
      })
});

      // Enable graceful stop
      process.once('SIGINT', () => bot.stop('SIGINT'))
      process.once('SIGTERM', () => bot.stop('SIGTERM'))
